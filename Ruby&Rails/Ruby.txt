/*
Just another ruby documemntation like Cheet Sheet

[   common things about Ruby    ]

	-	Everything in Ruby is Object.
	-	Variable in Ruby is just a refference.

[   Types   ]
	1. Strings
		-	When using single quotes it performs faster but didnt parse esc. symbols
		-	Also you may use %q and %Q literals for specify %Q - double quoted and 
		%q - single quoted strings.  e.g:
			%q{Hoagies & grinders} => "Hoagies & grinders"
		-	Creating of the string could be performed by usign << symbol and delimiter
		e.g:  my_string= << MY_DELIMITER
					dlgdg
					dgdfgdf
					bla lbla bla
			MY_DELIMITER
			
		-	Also to create string just use to_s method of the object. 
		
	2. Numbers
		-	If you need to use numbers just type them without any quotes.
		-	There are tow types of numbers in Ruby it's Fixnum and Bignum. Fixnum
		(-2^30 and 2^30) others are Bignum.
		-	Examples:
				-123456789    	=> -123456789     	#Fixnum
				0d123456789		=> 123456780    	#Fixnum
				1234323424231	=> 1234323424231  	#Bignum
				0x5c1			=> 1473				#Hex
				01411			=> 777				#Oct
				1_90_33			=> 19033			#Fixnum
		-	Ruby ignores underscvores in numbers it can be used to specify big numbers
		-	To use base-2 use symbols 0b at the begining of the string hex 0x, 
		base-8 just 0 base10 0d 	
		- 	Also Ruby has Float numbers  e.g/ :
				1.5				=>  1.5
				1.0e5			=>  100000.0
				1.e5			=>	!NoMethodError
		-	Since numbers are methods they are also can be used by methdos;
    			4.abs 			=>	absolute value    = 4
				6.zero?			=>	is zero           = false
		-	Arithmetic operatinos:
				+		Addition
				-		Substracrion
				/		Division
				* 		Multiplication
				()		Oreders of the operation.
				%		modulus

[   collections   ]
		-	Collection is such kind of objects that provided to store set of objects
		
		1.	Range 
			-   holds the sequesntial coolection of values, such as all numbers 
			between 1 and 9 or the letters between A and Z. 
			-	A range is created by placing a series of dots between the lower 
			and upper limit of the range.
			-	There is range of two types. when rangr created with 3 dots it 
			exlusdes last value e .g 0...4 => 0,1,2,3 but 0..4 => 0,1,2,3,4.
			-	To comapre this type use == character or eql? method. It compares 
			first and last value of the Range. e.g.:
			    good_cookies = 1...3
			    bad_cookies = 1..3
			    burnt_cookies = 1..3
			    puts(good_cookies == bad_cookies)  => false
			    puts(bad_cookies == burnt_cookies) => true
			    
			-   To check if the value is included into Range use: === or include?
			method.  e.g.:
			    my_guess = 2
			    his_guess = 19
			    puts(good_cookies === my_guess)         => true
			    puts(good_cookies.inckude?(my_guess))   => true
			    puts(good_cookies === his_guess)        => false
			
			-   include? method will return any value that is contained with the range
			of values in the range. e.g.:
			    bad_cookies.include?(2.44564)           => true
			
		2.  Array
		    -   An integer indexed and ordered collection of elemenets
		    -   Indexing in Arrays begins from indexx with number 0 like in C, C++
		    -   In Array could be an element of any type. e.g.:
		        its_so_empty = []
		        oh_so_empty = Array.new
		        hello = ['ni hao', 'bonjour', 'hi', 'howdy']
		        random_types = [13, 'napkin', (136 + 1).to_s]
		        
		    -   To create Array of strinng it's usually used %w syntax but there is 
		    differnece between %w and %W e.g.:
		        my_haiku = %w( my dog digs it here\n ) 
		            => ["my", "dog", "digs", "it", "here"]
		        my_haiku = %w( he is nice to me & cats\n ) 
		            => ["he", "is", "nice", "to", "me", "&", "cats"]
		        my_haiku = %W( but he ate #{(2*3)/6} once ) 
		            => ["but", "he", "ate", "1" "once"]
		        my_haiku = %w( but he ate #{(2*3)/6} once ) 
		            => ["but", "he", "ate", "#{(2*3)/6}", "once"]
		            
		    -   Some objects allow to create array from itself or from it members
		    by using special method - .to_a e.g.:
		        my_range = 1..10
		        my_array = my_range.to_a
		    
		    -   Some variables could be added to Array by setting each element
		    of the array. But if you set the element which are behind of Array
		    range it set nil values between element before nil and last 
		    nil element e.g.:
		        my_array[10] = 11       =>  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
		        my_array[12] = 12       =>  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, nil, 12]
		        
		    -   There are few methods to insert value into array. There are:
		        .push()  -  pushes allvalues after last element.
		        .insert() - allow to insert elements at specifiwed index firs 
		            argument is index 
		         operator << - add element to the last element of the array, could 
		            be used several times. e.g.:
		            my_array.push(15,16)
		                => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16]
		            my_array.insert(-1, 17)
		                => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17]
		            my_array.insert(-1, 17)
		                => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17]
		            my_array << 14
		                => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14]
		            my_array << 20 << 21 << 22
		                => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22]    
		    -   For usigng elements of array simply use [] brackets to get the element.
		    Also you may use .at() method e.g:
		        puts my_array[0]    =>      1
		        index = 2
		        my_array[index]     =>      3
		        my_array[0..20]     =>      [1, 2, 3]
                my_array.at(0)      =>      1
            -   method .fetch() used to get value if the specified element not found 
            it may be used to output the message e.g.:
                puts my_array.fetch(999, "Not Found!!!")    => Not Found!
            
            -   Another method is to retuern array of values. e.g.:
                puts my_array.values_at(0, 1, 2)    =>    [1, 2, 3]
            
            -   .pop and .shift methods used to grab elements and delete pop->from the end
            and shift->from the begining of the Array e.g.:
                my_array.pop        =>      [1, 2, 3, 4, 5, 6, 7, 8, 9]
                my_array.shift      =>      [2, 3, 4, 5, 6, 7, 8, 9, 10]
            
            -   If you wanna delete element and shift other element together e.g.:
                my_array.delete_at(1)       =>      2
                my_array                    =>      [1, 3, 4, 5, 6, 7, 8, 9, 10]
            
            -   If you wanna delete exact value from Array use examples:
                puts my_array.delete(4)     =>  4
                my_array                    =>  [1, 2, 3, 5, 6, 7, 8, 9, 10]
                puts my_array.delete(1337) { "Wrong!" } 
                    =>  Wrong!
            
        3. Hash
            -   this type also known as asociated array or dictionary.
            -   Hash could be createed in different ways e.g.:
                my_hash = {'mes1' => 'Hello', 'mes2' => 'There'}
            
            -   Also you may create Hash by using Haksh object e.g.:
                my_hash = Hash.new('Not here!')
                my_hash['non-existing_value-of-key']   =>       Not here!
            
            -   Also to add Hash value you could use next row:
                my_hash['New Key'] = 'New Value';
            
            -   To get values from Hash use similar methods like in Array
            methods: .fetch, [key], .values_at()
            -   Very usefull are next methods : .has_key?, has_value?, .empty?
            the names axplain what they do.
            -   To delete element use method .delete : 
                my_hash.delete('key')
            
            -   To delete all elements use Hash.clear method.

[   Variables   ]

    -   In Ruby variables is like a refferences.
    -   To when you set one variable to another like a = b on behind of Ruby
    you are coping just reffernce if you wanna to create new memory block
    and copy there value of the selected varible just use newvar = myvar.dup
    (here we use method .dup, method .clone is the same method).
    -   Assigning variables in Ruby works in way of rvalue is assgined to the lvalue. 
    -   Parralel assigning simple:
        p1, p2 = 1, 2               =>  p1 = 1 , p2 = 2
        rvalue = 0                  =>  0
        a, b = rvaule               =>  0
        a                           =>  0
        b                           =>  nil
        rvalue = [1, 2, 3, 4, 5]    =>  [1, 2, 3, 4, 5]
        a, b = rvaule               =>  [1, 2, 3, 4, 5]
        a                           =>  1
        b                           =>  2
    
    -   Here some example to set values of variables:
        a, (b, c) d = 10, 11, 12, 13    =>   a==10, b==11, c==nil, d==12
        a, (b, c) d = 10, [11, 12], 13    =>   a==10, b==11, c==12, d==13
    
    -   Operator += and operator -= has the same meaning as in another languages.
    -   If you dont wanna use object anymore (suppose you dislike it) it mean.
    that you dont want to be able to assign to this object use next:
        my_crazy_object.freeze
        my_crazy_object = some_value    =>  Type error! can't modify frozen object.
    
    -   Please look below to know how to create regExp in ruby (~=  return the 
    index of the first symbol occurence) : 
        my_string = "my string is too looooong"
        my_string =~ /\sstring\s/       =>  2
        my_string =~ /\s/               =>  2
        my_string =~ /my/               =>  0
    
    -   Different variables in different places (naming conventions): 
        example                                 place
        name fish_and_chips x_axis thx1138      Local
        $debug $customer $_ $paln9              Global 
        @name  @point_1 @X @_ @plan9            Instance, Object
        @@total @@symtab @@N @@x_pos @@Single   Class
        PI FeetPerMile String MyClass JazzSong  Constants and Class Names.
        
    

[    OOP and Structure programming    ]
    1. Methods 
        -   methods should start with lower case letter (and prefably all letters)
        e.g.:
            def my_new_method(name)
                puts "hey, " + name + " , this is my new method..."
            end 
            my_new_method('magnus')         => "hey, magnus, this is my new method..."
        -   if your method is a query method it should end with qestion mark - ?
        e.g.:
            France.has_military_victories?
        -   Another convention is to use Exclamation point when the method changes
        the object wrom which that method was called. e.g.:
            Bob_Barker.set_age!(30)
        
        -   if the object didnt have the method it returns string like 
        this : !NoMethodError
        -   the variables which you insert into method are local variables and
        could be used only inside if that method. 
        -   Also ruby allows you to use default values for parameters of 
        the methods. e.g.:
            def new_method(a = "this", b = "is", c = "fun")
                puts a + ' ' + b + ' ' + c + '.'
            end 
            new_method('Rails')             =>      Rails is fun.
        
        -   Ruby allows to use multiple parameters in one variable. e.g.:
            def print_relation(relation, *names)
                puts "My #{relation} include; #{names.join(', ')}."
            end 
            print_relation ("cousins", "Morgan", "Miles", "Lindsey")
                =>  My cousins include: Morgan, Miles, Lindsey.
        
        -   Calling of the methods could be performed without paretheses e.g.:
            puts "Look ma! No paretheses! "
            puts ("Look ma! Paretheses! ")
            puts
            puts()
        
        -   Ruby allows to return values from the methods it return values by
        	the keyword return or last used variable see below:
            def return_me(value)
                scoped_value = value
            end
            def echo_me(value)
                value
            end
            def multi_return
                return 'more' , 'than' ,'one'
            end
            my_value = return_me('this is fun!')
            puts my_value                           => this is fun!
            one,two,three = multi_return
            puts one + three                        => more one
                
    2. Proc objects.
        -   procs is such kind of objects that alowing you to create dynamic
        procedures e.g.:
            myproc = Proc.new {|animal| puts "I love #{animal}!"}
            myproc.call("Pandas")           =>      I love pandas!
        
        -   Also you may see that procs  save contexrt in which they were created. see
        below e.g.:
            def make_show_name(show)
                Proc.new { |host| show + " with " host }
            end
            show1 = make_show_name("Practical Cannibalism")
            show2 = make_show_name("Cottilions in the Amazon")
            
            show1.call("H. Annabellector")  =>  Practical Cannibalism with H. Annabellector
            show2.call("Jack Hannah")       =>  Cottilions in the Amazon with Jack Hannah
            show1.call("Kirstey Alley")     =>  Practical Cannibalism with Kirstey Alley
        
        -   In ruby there is similar to Proc function that creates small procedures
        called lamda e.g.:
            myproc = lambda { |x| puts "Argument #{x}"}
            myproc.call("Texas Forever!")       =>   Texas Forever!
        
        -   Objects created by lambda have stricter argument checking e.g.:
            lproc = lambda {|a,b| puts "#{a + b} <- the sum"}
            nproc = Proc.new {|a,b| puts "#{a + b} <- the sum"}
            nproc.call(1,2,3)   =>  3
            lproc.call(1,2,3)   =>  !Argument Error (wrong number of arguments (3 for 2))
        
        -   Objects created by lambda dont affect the flow of the application 
        outside when retuerning a valuem but objects created by Proc will exit their 
        enclosing method e.g.:
            def procnew 
                new_proc = Proc.new { return "I got here..."}
                new_proc.call 
                return "... but not here."
            end
            def lambaproc
                new_proc = lambda {return " You got here..."}
                new_proc.call
                return "And i got here!"
            end
            puts lambdaproc     =>      And I  got here
            puts procnew        =>      I got here...
        
        -   taking programm controll outside the procedure sample: 
            def yieldme
                print "1. Enter method"
                yield
                print "3. Exit method"
            end
            yieldme {print "2. Enter Block" }
        
        -   That can be performed also by using parameters of the methods:
            def myeach(myarray)
                iter = 0
                while (iter < myarray.lenght) : 
                    yield(myarray[iter])
                    iter += 1
                end
            end
            testarray = [1, 2, 3, 4, 5]
            myeach(testarray) { |item| print "#{item}: " }  => 1:2:3:4:5:
        
        -   if you prepend the name of the last parameter with an apmresand(&)
        than the block that is passed to the method will become a proc. also 
        yield work in the same way: 
            def ampresand (&block)
                block.call
                yield
            end
            ampresand { print "I'm gettin' called! "}
                => I'm gettin' called! I'm gettin' called! 
    3. Classes
        -   Class in Ruby like all in ruby is an object.
        Defininng the Class:
            class MyFirstClass < Object
            end
        
        -   If you didn't defined from what class your class should br defined 
        than ruby inherits it from class Object.
        -   method .initialize 
            
            
            
		        
		            
/////// Stoppped at page .  .  .  . //////////// 
		

[   escape symbols  ]
	\a			Bell alarm
	\???		Oct value
	\x 			Hex value
	\f			Form feed
	\n			New line
	\r			Return 
	\s 			Space
	\t 			Tab
	\v 			Vertical tab
	\b			Backspace
	\C-?		Control
	\M-?		Meta
	\M-?\C-?	Meta Control

[   conditionals    ]




[   loops   ]



[   books   ]
    1. Reading
        -   Humble Little Ruby Book (humblerubybook.pdf)
    2. To read
        -   


			cReated bY oLko nAfr(c)
 */